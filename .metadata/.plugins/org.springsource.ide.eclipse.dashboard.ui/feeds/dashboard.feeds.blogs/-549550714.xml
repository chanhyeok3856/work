<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 20 Mar 2024 19:03:26 GMT</lastBuildDate><item><title><![CDATA[Spring Integration 6.3.0-M2, 6.2.3 & 6.1.7 Available Now]]></title><link>https://spring.io/blog/2024/03/20/spring-integration-6-3-0-m2-6-2-3-and-6-1-7-available-now</link><guid isPermaLink="true">https://spring.io/blog/2024/03/20/spring-integration-6-3-0-m2-6-2-3-and-6-1-7-available-now</guid><dc:creator><![CDATA[Artem Bilan]]></dc:creator><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dear Spring community,&lt;/p&gt;
&lt;p&gt;On behalf of Spring Integration team, it is my pleasure to announce &lt;code&gt;6.3.0-M2&lt;/code&gt; version of the project which is available from &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;Spring Milestone Repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, bug fixes versions &lt;code&gt;6.1.7&lt;/code&gt; &amp;#x26; &lt;code&gt;6.2.3&lt;/code&gt; have been released as well into Maven Central.&lt;/p&gt;
&lt;p&gt;The notable changes in &lt;code&gt;6.3&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Kotlin DSL is compatible now with upcoming &lt;a href=&quot;https://kotlinlang.org/docs/whatsnew-eap.html&quot;&gt;Kotlin 2.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;spring-integration-security&lt;/code&gt; module has been removed altogether in favor of &lt;code&gt;SecurityContextChannelInterceptor&lt;/code&gt; &amp;#x26; &lt;code&gt;SecurityContextPropagationChannelInterceptor&lt;/code&gt; from the &lt;code&gt;spring-security-messaging&lt;/code&gt; module of Spring Security project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;ObservationPropagationChannelInterceptor&lt;/code&gt; is deprecated since it does not carry out a proper observation state between threads or even persistent store.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead, an observation has to be enabled on the &lt;code&gt;MessageChannel&lt;/code&gt; and respective &lt;code&gt;MessageHandler&lt;/code&gt; as a subscriber to this channel.
This way a tracing information is propagated via message headers using &lt;code&gt;PRODUCER&lt;/code&gt; &amp;#x26; &lt;code&gt;CONSUMER&lt;/code&gt; kinds for spans.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MessageHistory&lt;/code&gt; header is now mutable giving some performance improvement when we don&apos;t create a new message on every track&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;MessageChannel&lt;/code&gt; implementations based on the &lt;code&gt;UnicastingDispatcher&lt;/code&gt; now can be configured with a &lt;code&gt;Predicate&amp;#x3C;Exception&gt; failoverStrategy&lt;/code&gt; for dynamic decision for the failover on the exception thrown from the current &lt;code&gt;MessageHandler&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Mqttv5PahoMessageDrivenChannelAdapter&lt;/code&gt; uses now subscription identifiers to support shared subscriptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new &lt;code&gt;MockIntegrationContext.substituteTriggerFor()&lt;/code&gt; API has been added for testing module to easily adjust time-based configurations during test.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many thanks to everyone contributed!&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://docs.spring.io/spring-integration/reference/6.3/whats-new.html#whats-new&quot;&gt;What&apos;s New&lt;/a&gt; in the documentation and don&apos;t forget about a &lt;a href=&quot;https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-6.2-to-6.3-Migration-Guide&quot;&gt;Migration Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers,
Artem&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-integration/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/blob/main/CONTRIBUTING.adoc&quot;&gt;Contributing&lt;/a&gt; | &lt;a href=&quot;http://stackoverflow.com/questions/tagged/spring-integration&quot;&gt;Help&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Session 3.2.2 and 3.1.5 are available now.]]></title><link>https://spring.io/blog/2024/03/20/spring-session-3-2-2-and-3-1-5-are-available-now</link><guid isPermaLink="true">https://spring.io/blog/2024/03/20/spring-session-3-2-2-and-3-1-5-are-available-now</guid><dc:creator><![CDATA[Marcus Hert Da Coregio]]></dc:creator><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that Spring Session 3.2.2 and 3.1.5 are available now. These releases are mostly composed of bug fixes, dependency upgrades and documentation improvements.&lt;/p&gt;
&lt;p&gt;To learn more, please visit the releases page for &lt;a href=&quot;https://github.com/spring-projects/spring-session/releases/tag/3.2.2&quot;&gt;3.2.2&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-session/releases/tag/3.1.5&quot;&gt;3.1.5&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Session 3.3.0-M3 available now]]></title><link>https://spring.io/blog/2024/03/20/spring-session-3-3-0-m3-available-now</link><guid isPermaLink="true">https://spring.io/blog/2024/03/20/spring-session-3-3-0-m3-available-now</guid><dc:creator><![CDATA[Marcus Hert Da Coregio]]></dc:creator><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, it is my pleasure to announce the release of Spring Session 3.3.0-M3! The milestone release of Spring Session contains a few noteworthy new features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Spring Session Backed implementation of &lt;code&gt;ReactiveSessionRegistry&lt;/code&gt; &lt;a href=&quot;https://github.com/spring-projects/spring-session/issues/2824&quot;&gt;#2824&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allow &lt;code&gt;PlatformTransactionManager&lt;/code&gt; to be specified using &lt;code&gt;@SpringSessionTransactionManager&lt;/code&gt; &lt;a href=&quot;https://github.com/spring-projects/spring-session/issues/2821&quot;&gt;#2821&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/spring-projects/spring-session/releases/tag/3.3.0-M3&quot;&gt;3.3.0-M3&lt;/a&gt; release notes for complete details.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-session&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-session/issues&quot;&gt;GitHub Issues&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Tips: the Exposed ORM for Kotlin]]></title><link>https://spring.io/blog/2024/03/20/spring-tips-the-exposed-orm-for-kotlin</link><guid isPermaLink="true">https://spring.io/blog/2024/03/20/spring-tips-the-exposed-orm-for-kotlin</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! In this installment we look at the Exposed Object Relational Mapper framework for Kotlin. #Kotlin #Java #JDBC #springboot&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4p5ovtFTHts?si=VKQvYbZYSrprNxVQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - March 19th, 2024]]></title><link>https://spring.io/blog/2024/03/19/this-week-in-spring-march-19th-2024</link><guid isPermaLink="true">https://spring.io/blog/2024/03/19/this-week-in-spring-march-19th-2024</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 19 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! And happy Java 22 release day to those who celebrate! I just put out a &lt;em&gt;huge&lt;/em&gt; blog detailing many of the exciting new features in Java 22. Check &lt;a href=&quot;https://spring.io/blog/2024/03/19/hello-java-22&quot;&gt;it out&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As usual, we&apos;ve got a packed roundup to get through this week so let&apos;s dive right into it!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;https://spring.io/blog/2024/03/19/spring-authorization-server-1-3-0-m3-available-now&quot;&gt;Spring Authorization Server 1.3.0-M3 is available!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/19/token-exchange-support-in-spring-security-6-3-0-m3&quot;&gt;the Token Exchange Support in Spring Security 6.3.0-M3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/19/spring-authorization-server-1-2-3-1-1-6-and-1-0-6-available-now-including&quot;&gt;the Spring Authorization Server 1.2.3, 1.1.6, and 1.0.6 are available now and include fixes for CVE-22258&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/19/spring-for-apache-kafka-3-0-15-3-1-3-and-3-2-0-m2-available-now&quot;&gt;Spring for Apache Kafka 3.0.15, 3.1.3, and 3.2.0-M2 are available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/18/spring-for-apache-pulsar-1-0-4-available-now&quot;&gt;Spring for Apache Pulsar 1.0.4 are available now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/18/spring-security-6-3-0-m3-6-2-3-6-1-8-6-0-10-5-8-11-and-5-7-12-are-now&quot;&gt;Spring Security 6.3.0-M3, 6.2.3, 6.1.8, 6.0.10, 5.8.11 and 5.7.12 are now available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/18/spring-for-apache-pulsar-1-1-0-m2-available-now&quot;&gt;Spring for Apache Pulsar 1.1.0-M2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/15/hypermedia-and-browser-enhancement&quot;&gt;Dr. Dave Syer wrote up an amazing look at hypermedia and browser enhancement technologies like HTMX and their relationship to Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/15/spring-data-2023-1-4-and-2023-0-10-released&quot;&gt;Spring Data 2023.1.4 and 2023.0.10 are available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/15/spring-data-2024-0-0-m2-available&quot;&gt;Spring Data 2024.0.0-m2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;in last week&apos;s installment of a Bootiful Podcast, &lt;a href=&quot;https://spring.io/blog/2024/03/15/spring-boot-testjars-founder-rob-winch&quot;&gt;I talked to Spring Boot Testjars creator and Spring Security lead Rob Winch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/14/spring-hateoas-2-1-4-2-2-1-and-2-3-m1-released&quot;&gt;Spring HATEOAS 2.1.4, 2.2.1, and 2.3 M1 have been released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spring Framework 6.1.5, 6.0.18, and 5.3.33 &lt;a href=&quot;https://spring.io/blog/2024/03/14/spring-framework-6-1-5-6-0-18-and-5-3-33-available-now-including-fixes-for&quot;&gt;are available including fixes for CVE 2024-22259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;in last week&apos;s installment of &lt;em&gt;Spring Tips&lt;/em&gt;, &lt;a href=&quot;https://spring.io/blog/2024/03/13/spring-tips-spring-batch-remote-partitioning-your-easy-button-for-data-scale&quot;&gt;I looked at Spring Batch remote partitioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/13/spring-tools-4-22-0-released&quot;&gt;Spring Tools 4.22.0 has been released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2024/03/18/spring-security-6-3-0-m3-6-2-3-6-1-8-6-0-10-5-8-11-and-5-7-12-are-now&quot;&gt;Spring Security 6.3.0-M3, 6.2.3, 6.1.8, 6.0.10, 5.8.11 and 5.7.12 are now available &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the Webjars project needs your help! Try out this new Webjars locator implementation, contributed by our very own Dr. Syer, &lt;a href=&quot;https://twitter.com/_JamesWard/status/1769769144772079827?s=12&amp;#x26;t=n-UflcIbnx1lage-TBk0Cg&quot;&gt;to make webjars even more performant&lt;/a&gt; when used in the context of something like  a Spring Boot application.&lt;/li&gt;
&lt;li&gt;the Java Technie blog has a nice video &lt;a href=&quot;https://www.youtube.com/watch?v=oHPNpgy21Rk&quot;&gt;on Spring Boot Apache Pular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A propos: if you&apos;re running Java 8 onward on macOS 14.4 on Apple Silicon, then you may be susceptible to a regression in macOS that&apos;ll manifest as apparent and sudden quit outs of your Java process. There is no fix yet, so Oracle advise considering delaying your upgrade.&lt;/li&gt;
&lt;li&gt;Our friend Joris Kuipers over on the TRIFORK blog has a &lt;a href=&quot;https://trifork.nl/blog/spring-boot-observability-database/&quot;&gt;nice pokst on Spring Boot Observability for database interactions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hey, did I mention I&apos;ll &lt;a href=&quot;https://twitter.com/GoogleCloudTech/status/1765808389936889875&quot;&gt;be keynoting Google Cloud Tech in Las Vegas? I hope to see you there!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the Netflix tech blog shares an amazing &lt;a href=&quot;https://netflixtechblog.com/bending-pause-times-to-your-will-with-generational-zgc-256629c9386b&quot;&gt;look at their garbage collection numbers here in this blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I know Java 22 just dropped, but for those who &lt;a href=&quot;https://thenewstack.io/we-can-have-nice-things-upgrading-to-java-21-is-worth-it/&quot;&gt;haven&apos;t heard it, you should be at least on Java 21! &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello, Java 22!]]></title><link>https://spring.io/blog/2024/03/19/hello-java-22</link><guid isPermaLink="true">https://spring.io/blog/2024/03/19/hello-java-22</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 19 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Happy &lt;a href=&quot;https://blogs.oracle.com/java/post/the-arrival-of-java-22&quot;&gt;Java 22&lt;/a&gt; release day, to those who
celebrate! Did you get the bits already? Go, go, go! Java 22 is a &lt;em&gt;significant&lt;/em&gt; improvement that I think is a worthy
upgrade for everyone. There are some big, final released features, like Project Panama, and a slew of even-better
preview features. I couldn&apos;t hope to cover them all, but I did want to touch on a few of my favorites. We&apos;re going to touch on a number of features. The code, if you want to follow along at home, &lt;a href=&quot;https://github.com/spring-tips/java22&quot;&gt;is  here (&lt;code&gt;https://github.com/spring-tips/java22&lt;/code&gt;)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love Java 22, and of course, I love GraalVM, and both have releases today! Java is of course our favorite runtime and
language, and GraalVM is a high-performance JDK distribution that supports additional languages and allows
ahead-of-time (AOT) compilation (they&apos;re called GraalVM native images). GraalVM includes all the niceties of the new
Java 22 release, with some extra utilities, so I always recommend just downloading that one. I&apos;m interested,
specifically, in the GraalVM native image capability. The resulting binaries start almost instantly and take
considerably less RAM compared to their JRE cousins. GraalVM isn&apos;t new, but it&apos;s worth remembering that Spring Boot has
a great engine to support turning your Spring Boot applications into GraalVM native images.&lt;/p&gt;
&lt;h2 id=&quot;installation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#installation&quot; aria-label=&quot;installation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;p&gt;Here&apos;s what I did.&lt;/p&gt;
&lt;p&gt;I&apos;m using the fantastic &lt;a href=&quot;https://sdkman.io&quot;&gt;SDKMAN&lt;/a&gt; package manager for Java. I&apos;m also running on an Apple Silicon chip running macOS. This, and the fact that I like and encourage the use of GraalVM, will be somewhat important later, so don&apos;t forget. There&apos;ll be a test!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sdk install java 22-graalce
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&apos;d also make it your default:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sdk default java 22-graalce
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open up a new shell before continuing and then verify everything&apos;s working by running &lt;code&gt;javac --version&lt;/code&gt;, &lt;code&gt;java --version&lt;/code&gt;, and &lt;code&gt;native-image --version&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&apos;re reading this in the far-flung future  (do we have flying cars yet?) and there&apos;s &lt;code&gt;50-graalce&lt;/code&gt;, then by all the means install that! Bigger versions are better!&lt;/p&gt;
&lt;h2 id=&quot;you-gotta-start-somewhere&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#you-gotta-start-somewhere&quot; aria-label=&quot;you gotta start somewhere permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;You Gotta Start Somewhere...&lt;/h2&gt;
&lt;p&gt;At this point, I wanted to start building! So, I went to my second favorite place on the internet, the Spring Initializr - &lt;a href=&quot;https://start.spring.io&quot;&gt;start.spring.io&lt;/a&gt; - and generated a new project, using the following specifications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I selected the &lt;code&gt;3.3.0-snapshot&lt;/code&gt; version of Spring Boot. 3.3 is not yet GA, but it should be in a few short months. In the meantime, onward and upward! This release has better support for Java 22.&lt;/li&gt;
&lt;li&gt;I selected &lt;code&gt;Maven&lt;/code&gt; as the build tool.&lt;/li&gt;
&lt;li&gt;I added &lt;code&gt;GraalVM Native Support&lt;/code&gt; support, &lt;code&gt;H2 Database&lt;/code&gt;, and  &lt;code&gt;JDBC API&lt;/code&gt; support.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I opened the project in my IDE, like this: &lt;code&gt;idea pom.xml&lt;/code&gt;. Now I needed to configure a few of the Maven plugins to support both Java 22 and some of the preview features we&apos;re going to look at in this article. Here&apos;s my fully configured &lt;code&gt;pom.xml&lt;/code&gt;. It&apos;s a little dense, so I&apos;ll see you after the code for the walkthrough.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-pom&quot;&gt;&amp;#x3C;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&amp;#x3C;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &amp;#x3C;modelVersion&gt;4.0.0&amp;#x3C;/modelVersion&gt;
    &amp;#x3C;parent&gt;
        &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-boot-starter-parent&amp;#x3C;/artifactId&gt;
        &amp;#x3C;version&gt;3.3.0-SNAPSHOT&amp;#x3C;/version&gt;
        &amp;#x3C;relativePath/&gt; &amp;#x3C;!-- lookup parent from repository --&gt;
    &amp;#x3C;/parent&gt;
    &amp;#x3C;groupId&gt;com.example&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;demo&amp;#x3C;/artifactId&gt;
    &amp;#x3C;version&gt;0.0.1-SNAPSHOT&amp;#x3C;/version&gt;
    &amp;#x3C;name&gt;demo&amp;#x3C;/name&gt;
    &amp;#x3C;description&gt;Demo project for Spring Boot&amp;#x3C;/description&gt;
    &amp;#x3C;properties&gt;
        &amp;#x3C;java.version&gt;22&amp;#x3C;/java.version&gt;
    &amp;#x3C;/properties&gt;
    &amp;#x3C;dependencies&gt;

        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;spring-boot-starter-jdbc&amp;#x3C;/artifactId&gt;
        &amp;#x3C;/dependency&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;com.h2database&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;h2&amp;#x3C;/artifactId&gt;
            &amp;#x3C;scope&gt;runtime&amp;#x3C;/scope&gt;
        &amp;#x3C;/dependency&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;spring-boot-starter&amp;#x3C;/artifactId&gt;
        &amp;#x3C;/dependency&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.graalvm.sdk&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;graal-sdk&amp;#x3C;/artifactId&gt;
            &amp;#x3C;version&gt;23.1.2&amp;#x3C;/version&gt;
        &amp;#x3C;/dependency&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.graalvm.nativeimage&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;svm&amp;#x3C;/artifactId&gt;

 &amp;#x3C;version&gt;23.1.2&amp;#x3C;/version&gt;
            &amp;#x3C;scope&gt;provided&amp;#x3C;/scope&gt;
        &amp;#x3C;/dependency&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;spring-boot-starter-test&amp;#x3C;/artifactId&gt;
            &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
        &amp;#x3C;/dependency&gt;
    &amp;#x3C;/dependencies&gt;
    &amp;#x3C;build&gt;
        &amp;#x3C;plugins&gt;
            &amp;#x3C;plugin&gt;
                &amp;#x3C;groupId&gt;org.graalvm.buildtools&amp;#x3C;/groupId&gt;
                &amp;#x3C;artifactId&gt;native-maven-plugin&amp;#x3C;/artifactId&gt;
                &amp;#x3C;version&gt;0.10.1&amp;#x3C;/version&gt;
                &amp;#x3C;configuration&gt;
                    &amp;#x3C;buildArgs&gt;
                        &amp;#x3C;buildArg&gt; --features=com.example.demo.DemoFeature&amp;#x3C;/buildArg&gt;
                        &amp;#x3C;buildArg&gt; --enable-native-access=ALL-UNNAMED &amp;#x3C;/buildArg&gt;
                        &amp;#x3C;buildArg&gt; -H:+ForeignAPISupport&amp;#x3C;/buildArg&gt;
                        &amp;#x3C;buildArg&gt; -H:+UnlockExperimentalVMOptions&amp;#x3C;/buildArg&gt;
                        &amp;#x3C;buildArg&gt; --enable-preview&amp;#x3C;/buildArg&gt;
                    &amp;#x3C;/buildArgs&gt;
                &amp;#x3C;/configuration&gt;
            &amp;#x3C;/plugin&gt;
            &amp;#x3C;plugin&gt;
                &amp;#x3C;groupId&gt;org.apache.maven.plugins&amp;#x3C;/groupId&gt;
                &amp;#x3C;artifactId&gt;maven-surefire-plugin&amp;#x3C;/artifactId&gt;
                &amp;#x3C;configuration&gt;
                    &amp;#x3C;argLine&gt;--enable-preview&amp;#x3C;/argLine&gt;
                &amp;#x3C;/configuration&gt;
            &amp;#x3C;/plugin&gt;
            &amp;#x3C;plugin&gt;
                &amp;#x3C;groupId&gt;org.apache.maven.plugins&amp;#x3C;/groupId&gt;
                &amp;#x3C;artifactId&gt;maven-compiler-plugin&amp;#x3C;/artifactId&gt;
                &amp;#x3C;configuration&gt;
                    &amp;#x3C;enablePreview&gt;true&amp;#x3C;/enablePreview&gt;
                &amp;#x3C;/configuration&gt;
            &amp;#x3C;/plugin&gt;
            &amp;#x3C;plugin&gt;
                &amp;#x3C;groupId&gt;org.springframework.boot&amp;#x3C;/groupId&gt;
                &amp;#x3C;artifactId&gt;spring-boot-maven-plugin&amp;#x3C;/artifactId&gt;
                &amp;#x3C;configuration&gt;
                    &amp;#x3C;compilerArguments&gt; --enable-preview &amp;#x3C;/compilerArguments&gt;
                    &amp;#x3C;jvmArguments&gt; --enable-preview&amp;#x3C;/jvmArguments&gt;
                &amp;#x3C;/configuration&gt;
            &amp;#x3C;/plugin&gt;
            &amp;#x3C;plugin&gt;
			&amp;#x3C;groupId&gt;io.spring.javaformat&amp;#x3C;/groupId&gt;
			&amp;#x3C;artifactId&gt;spring-javaformat-maven-plugin&amp;#x3C;/artifactId&gt;
			&amp;#x3C;version&gt;0.0.41&amp;#x3C;/version&gt;
			&amp;#x3C;executions&gt;
				&amp;#x3C;execution&gt;
					&amp;#x3C;phase&gt;validate&amp;#x3C;/phase&gt;
					&amp;#x3C;inherited&gt;true&amp;#x3C;/inherited&gt;
					&amp;#x3C;goals&gt;
						&amp;#x3C;goal&gt;validate&amp;#x3C;/goal&gt;
					&amp;#x3C;/goals&gt;
				&amp;#x3C;/execution&gt;
			&amp;#x3C;/executions&gt;
		&amp;#x3C;/plugin&gt;
        &amp;#x3C;/plugins&gt;
    &amp;#x3C;/build&gt;
    &amp;#x3C;repositories&gt;
    &amp;#x3C;repository&gt;
            &amp;#x3C;id&gt;spring-milestones&amp;#x3C;/id&gt;
            &amp;#x3C;name&gt;Spring Milestones&amp;#x3C;/name&gt;
            &amp;#x3C;url&gt;https://repo.spring.io/milestone&amp;#x3C;/url&gt;
            &amp;#x3C;snapshots&gt;
                &amp;#x3C;enabled&gt;false&amp;#x3C;/enabled&gt;
            &amp;#x3C;/snapshots&gt;
        &amp;#x3C;/repository&gt;
        &amp;#x3C;repository&gt;
            &amp;#x3C;id&gt;spring-snapshots&amp;#x3C;/id&gt;
            &amp;#x3C;name&gt;Spring Snapshots&amp;#x3C;/name&gt;
            &amp;#x3C;url&gt;https://repo.spring.io/snapshot&amp;#x3C;/url&gt;
            &amp;#x3C;releases&gt;
                &amp;#x3C;enabled&gt;false&amp;#x3C;/enabled&gt;
            &amp;#x3C;/releases&gt;
        &amp;#x3C;/repository&gt;
    &amp;#x3C;/repositories&gt;
    &amp;#x3C;pluginRepositories&gt;
        &amp;#x3C;pluginRepository&gt;
            &amp;#x3C;id&gt;spring-milestones&amp;#x3C;/id&gt;
            &amp;#x3C;name&gt;Spring Milestones&amp;#x3C;/name&gt;
            &amp;#x3C;url&gt;https://repo.spring.io/milestone&amp;#x3C;/url&gt;
            &amp;#x3C;snapshots&gt;
                &amp;#x3C;enabled&gt;false&amp;#x3C;/enabled&gt;
            &amp;#x3C;/snapshots&gt;
        &amp;#x3C;/pluginRepository&gt;
        &amp;#x3C;pluginRepository&gt;
            &amp;#x3C;id&gt;spring-snapshots&amp;#x3C;/id&gt;
            &amp;#x3C;name&gt;Spring Snapshots&amp;#x3C;/name&gt;
            &amp;#x3C;url&gt;https://repo.spring.io/snapshot&amp;#x3C;/url&gt;
            &amp;#x3C;releases&gt;
                &amp;#x3C;enabled&gt;false&amp;#x3C;/enabled&gt;
            &amp;#x3C;/releases&gt;
        &amp;#x3C;/pluginRepository&gt;
    &amp;#x3C;/pluginRepositories&gt;
&amp;#x3C;/project&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know, I know! There&apos;s a lot! But, not really. This &lt;code&gt;pom.xml&lt;/code&gt; is almost identical to what I got from the Spring Initializr. The main changes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I redefined the &lt;code&gt;maven-surefire-plugin&lt;/code&gt; and &lt;code&gt;maven-compiler-plugin&lt;/code&gt; to support preview features.&lt;/li&gt;
&lt;li&gt;I added the &lt;code&gt;spring-javaformat-maven-plugin&lt;/code&gt; to support formatting my source code.&lt;/li&gt;
&lt;li&gt;I added two new dependencies: &lt;code&gt;org.graalvm.sdk:graal-sdk:23.1.2&lt;/code&gt; and &lt;code&gt;org.graalvm.nativeimage:svm:23.1.2&lt;/code&gt;, both of which are exclusively for the creation of the GraalVM &lt;code&gt;Feature&lt;/code&gt; implementation that we will need later.&lt;/li&gt;
&lt;li&gt;I added configuration stanzas to the &lt;code&gt;&amp;#x3C;configuration&gt;&lt;/code&gt; sections of the &lt;code&gt;native-maven-plugin&lt;/code&gt;, and the &lt;code&gt;spring-boot-maven-plugin&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In no time at all, Spring Boot 3.3 will be GA and support Java 22, and so maybe half of this build file will disappear. (Talk about &lt;em&gt;Spring cleaning&lt;/em&gt;!)&lt;/p&gt;
&lt;h2 id=&quot;a-quick-programming-note&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a-quick-programming-note&quot; aria-label=&quot;a quick programming note permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Quick Programming Note&lt;/h2&gt;
&lt;p&gt;Throughout this article, I&apos;m going to refer to a functional interface type called &lt;code&gt;LanguageDemonstrationRunner&lt;/code&gt;. It&apos;s just a functional interface I created that is declared to throw a &lt;code&gt;Throwable&lt;/code&gt;, so that I don&apos;t have to worry about it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.example.demo;

@FunctionalInterface
interface LanguageDemonstrationRunner {

    void run() throws Throwable;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have an &lt;code&gt;ApplicationRunner&lt;/code&gt; which in turn injects all implementations of my functional interface and then invokes their &lt;code&gt;run&lt;/code&gt; method, catching and handling &lt;code&gt;Throwable&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
    // ...	
    @Bean
	ApplicationRunner demo(Map&amp;#x3C;String, LanguageDemonstrationRunner&gt; demos) {
		return _ -&gt; demos.forEach((_, demo) -&gt; {
			try {
				demo.run();
			} //
			catch (Throwable e) {
				throw new RuntimeException(e);
			}
		});
	}
    // ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK, that established.. onward!&lt;/p&gt;
&lt;h2 id=&quot;bye-jni&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#bye-jni&quot; aria-label=&quot;bye jni permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bye, JNI!&lt;/h2&gt;
&lt;p&gt;This release sees the long-awaited release of &lt;a href=&quot;https://openjdk.org/projects/panama&quot;&gt;Project Panama&lt;/a&gt;. This is one of the three features I&apos;ve most been waiting for. The other two features, virtual threads and GraalVM native images, have been a reality for at least six months now.  Project Panama is  the thing that lets us leverage the galaxy of C, C++ code that&apos;s been so long denied us. Come to think of it, it probably supports  basically any kind of binary if it supports &lt;a href=&quot;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&quot;&gt;ELF&lt;/a&gt;, I&apos;d imagine. Rust programs and Go programs can be compiled to C-compatible binaries, for example, so I imagine (but haven&apos;t tried) that this means easy enough interop with those languages, too. Broadly, in this section, when I talk about &quot;native code,&quot; I&apos;m talking about binaries that are compiled in such a way that they can be invoked like a C library might.&lt;/p&gt;
&lt;p&gt;Historically, Java has been very insular. It has &lt;em&gt;not&lt;/em&gt; been easy for Java developers to repurpose native C and C++ code. It makes sense. Native, operating system-specific code would only serve to undermine Java&apos;s promise of &lt;em&gt;Write Once, Run Anywhere&lt;/em&gt;. It&apos;s always been a bit taboo. But I don&apos;t see why it should be.  To be fair, we&apos;ve done alright, despite the absence of easy native code interop. There is &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_Native_Interface&quot;&gt;JNI&lt;/a&gt;, which stands for &lt;em&gt;Joylessly Navigating the Inferno&lt;/em&gt;, I&apos;m pretty sure. In order to use JNI, you must write more, &lt;em&gt;new&lt;/em&gt; C/C++ code to glue together whatever language you want to use with Java. (How is this productive? Who thought this was a good idea?) Most people &lt;em&gt;want&lt;/em&gt; to use JNI like they &lt;em&gt;want&lt;/em&gt; a root canal!&lt;/p&gt;
&lt;p&gt;Most people don&apos;t. We&apos;ve simply had to reinvent everything in an idiomatic, Java-style way.  For nearly anything you could want to do, there is probably   a pure Java solution out there that runs anywhere Java does. It works fine  until  it doesn&apos;t. Java has missed out on key opportunities here. Imagine if Kubernetes had been built in Java? Imagine if the current AI revolution was powered by Java? There are a lot of reasons why these two notions would&apos;ve been inconceivable when Numpy, Scipy, and Kubernetes were first created, but today? Today, they released Project Panama.&lt;/p&gt;
&lt;p&gt;Project Panama introduces an easy way to link into native code. There are two levels of support. You can, in a rather low-level way, manipulate memory and pass data back and forth into native code. I said &quot;back and forth,&quot; but I probably should&apos;ve said &quot;down and up&quot; to native code. Project Panama supports &quot;downcalls,&quot; calls into native code from Java, and &quot;upcalls,&quot; calls from native code into Java. You can invoke functions, allocate and free memory, read and update fields in &lt;code&gt;struct&lt;/code&gt;s, etc.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a look at a simple example. The code uses the new &lt;code&gt;java.lang.foreign.*&lt;/code&gt; APIs to look up a symbol called &lt;code&gt;printf&lt;/code&gt; (which is basically &lt;code&gt;System.out.print()&lt;/code&gt;), allocate memory (sort of like &lt;code&gt;malloc&lt;/code&gt;) buffer, and then pass that buffer to the &lt;code&gt;printf&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
package com.example.demo;

import org.springframework.stereotype.Component;

import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.SymbolLookup;
import java.util.Objects;

import static java.lang.foreign.ValueLayout.ADDRESS;
import static java.lang.foreign.ValueLayout.JAVA_INT;

@Component
class ManualFfi implements LanguageDemonstrationRunner {

    // this is package private because we&apos;ll need it later
	static final FunctionDescriptor PRINTF_FUNCTION_DESCRIPTOR =
            FunctionDescriptor.of(JAVA_INT, ADDRESS);

	private final SymbolLookup symbolLookup;

    // SymbolLookup is a Panama API, but I have an implementation I&apos;m injecting
	ManualFfi(SymbolLookup symbolLookup) {
		this.symbolLookup = symbolLookup;
	}

	@Override
	public void run() throws Throwable {
		var symbolName = &quot;printf&quot;;
		var nativeLinker = Linker.nativeLinker();
		var methodHandle = this.symbolLookup.find(symbolName)
			.map(symbolSegment -&gt; nativeLinker.downcallHandle(symbolSegment, PRINTF_FUNCTION_DESCRIPTOR))
			.orElse(null);
		try (var arena = Arena.ofConfined()) {
			var cString = arena.allocateFrom(&quot;hello, Panama!&quot;);
			Objects.requireNonNull(methodHandle).invoke(cString);
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&apos;s the definition for the &lt;code&gt;SymbolLookup&lt;/code&gt; that I put together. It is a sort of composite, trying one &lt;code&gt;SymbolLookup&lt;/code&gt;,
and then another if the first should fail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
@Bean
SymbolLookup symbolLookup() {
    var loaderLookup = SymbolLookup.loaderLookup();
    var stdlibLookup = Linker.nativeLinker().defaultLookup();
    return name -&gt; loaderLookup.find(name).or(() -&gt; stdlibLookup.find(name));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run this, and you&apos;ll see it prints out &lt;code&gt;hello, Panama!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You might be wondering why I didn&apos;t pick something more interesting as an example. It turns out that there&apos;s precious
little that you can both take for granted across all operating systems &lt;em&gt;and&lt;/em&gt; perceive as having done something on your
computer. IO seemed to be about all I could think of, and console IO is even easier to follow.&lt;/p&gt;
&lt;p&gt;But what about GraalVM native images? It doesn&apos;t support &lt;em&gt;every&lt;/em&gt; thing you might want to do. And, at least for the
moment, it doesn&apos;t run on Apple Silicon, only x86 chips. I developed this example and
set &lt;a href=&quot;https://raw.githubusercontent.com/spring-tips/java22/main/.github/workflows/maven.yml&quot;&gt;up a GitHub Action&lt;/a&gt; to see
the results in an x86 Linux environment. It&apos;s a bit of a pity for us Mac developers who are not using Intel chips, but
most of us aren&apos;t deploying to Apple devices in production, we&apos;re deploying to Linux and x86, so it&apos;s not a dealbreaker.&lt;/p&gt;
&lt;p&gt;There are some
other &lt;a href=&quot;https://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/ForeignInterface.md&quot;&gt;limitations, too&lt;/a&gt;.
For example, GraalVM native images only support the first &lt;code&gt;SymbolLookup&lt;/code&gt;, &lt;code&gt;loaderLookup&lt;/code&gt;, in our composite. If that one
doesn&apos;t work, then neither of them will work.&lt;/p&gt;
&lt;p&gt;GraalVM wants to know about some of the dynamic things you&apos;re going to do at runtime, including foreign function
invocation. You need to tell it ahead of time. For most other things about which it needs such information, like
reflection, serialization, resource loading, and more, you need to write a &lt;code&gt;.json&lt;/code&gt; configuration file (or let Spring&apos;s
AOT engine write them for you). This feature is so new that you have to go down a few abstraction levels and write a
GraalVM &lt;code&gt;Feature&lt;/code&gt; class. A &lt;code&gt;Feature&lt;/code&gt;  has callback methods that get invoked during GraalVM&apos;s native compilation
lifecycle. You&apos;ll tell
GraalVM the signature, the &lt;em&gt;shape&lt;/em&gt;, of the native function that we&apos;ll eventually invoke at runtime. Here&apos;s
the &lt;code&gt;Feature&lt;/code&gt;.
There&apos;s only one line of value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.example.demo;

import org.graalvm.nativeimage.hosted.Feature;
import org.graalvm.nativeimage.hosted.RuntimeForeignAccess;

import static com.example.demo.ManualFfi.PRINTF_FUNCTION_DESCRIPTOR;

public class DemoFeature implements Feature {

	@Override
	public void duringSetup(DuringSetupAccess access) {
        // this is the only line that&apos;s important. NB: we&apos;re sharing 
        // the PRINTF_FUNCTION_DESCRIPTOR from our ManualFfi bean from earlier. 
		RuntimeForeignAccess.registerForDowncall(PRINTF_FUNCTION_DESCRIPTOR);
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then we need to wire up the feature, telling GraalVM about it, by passing in the &lt;code&gt;--features&lt;/code&gt; attribute to the GraalVM native image Maven plugin configuration. We also need to unlock the foreign API support and unlock experimental stuff. (I don&apos;t know why this is experimental in GraalVM native images when it&apos;s not experimental any longer in Java 22 itself). Also, we need to tell GraalVM to allow native access for all unnamed types. So, altogether, here&apos;s the final Maven plugin configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;#x3C;plugin&gt;
    &amp;#x3C;groupId&gt;org.graalvm.buildtools&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;native-maven-plugin&amp;#x3C;/artifactId&gt;
    &amp;#x3C;version&gt;0.10.1&amp;#x3C;/version&gt;
    &amp;#x3C;configuration&gt;
        &amp;#x3C;buildArgs&gt;
            &amp;#x3C;buildArg&gt;--features=com.example.demo.DemoFeature&amp;#x3C;/buildArg&gt;
            &amp;#x3C;buildArg&gt;--enable-native-access=ALL-UNNAMED&amp;#x3C;/buildArg&gt;
            &amp;#x3C;buildArg&gt;-H:+ForeignAPISupport&amp;#x3C;/buildArg&gt;
            &amp;#x3C;buildArg&gt;-H:+UnlockExperimentalVMOptions&amp;#x3C;/buildArg&gt;
            &amp;#x3C;buildArg&gt;--enable-preview&amp;#x3C;/buildArg&gt;
        &amp;#x3C;/buildArgs&gt;
    &amp;#x3C;/configuration&gt;
&amp;#x3C;/plugin&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an awesome result. I compiled the code in this example into a GraalVM native image running on GitHub Actions
runners and then executed it. The application, which - I remind you - has the Spring JDBC support, a complete and
embedded SQL 99 compliant Java database called H2, and everything on the classpath - executes in 0.031 seconds (31
milliseconds, or 31 thousandths of a second), takes tens of megabytes of RAM, and invokes the native C code, from the
GraalVM native image!&lt;/p&gt;
&lt;p&gt;I&apos;m so happy, y&apos;all. I&apos;ve waited for this day for so long.&lt;/p&gt;
&lt;p&gt;But this does feel a little low-level. At the end of the day, you are using a Java API to programmatically create and
maintain structures in native code. It&apos;s sort of like using SQL from JDBC. JDBC lets you manipulate SQL database records
in Java, but you&apos;re not writing SQL in Java and compiling it in Java and executing it in SQL. There&apos;s an abstraction
delta; you&apos;re sending strings into the SQL engine and then getting records back out as &lt;code&gt;ResultSet&lt;/code&gt; objects. The same is
true for the low-level API in Panama. It works, but you&apos;re not invoking native code, your looking up symbols with
strings and manipulating memory.&lt;/p&gt;
&lt;p&gt;So, they released a separate but related tool called &lt;code&gt;jextract&lt;/code&gt;. You can point it at a C header file, like &lt;code&gt;stdio.h&lt;/code&gt;, in
which the &lt;code&gt;printf&lt;/code&gt; function is defined, and it&apos;ll generate Java code that mimics the call signature of the underlying C
code. I didn&apos;t use it in this example because the resulting Java code ends up being tied to the underlying platform. I
pointed it to &lt;code&gt;stdio.h&lt;/code&gt; and got a lot of macOS specific definitions. I could hide all of that behind a runtime check for
the operating system and then dynamically load a particular implementation, but, eh, this blog&apos;s already too long. If
you want to see how to run &lt;code&gt;jextract&lt;/code&gt;, here&apos;s the bash script I used that worked for macOS and Linux. Your mileage may
vary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env bash
LINUX=https://download.java.net/java/early_access/jextract/22/3/openjdk-22-jextract+3-13_linux-x64_bin.tar.gz
MACOS=https://download.java.net/java/early_access/jextract/22/3/openjdk-22-jextract+3-13_macos-x64_bin.tar.gz

OS=$(uname)

DL=&quot;&quot;
STDIO=&quot;&quot;

if [ &quot;$OS&quot; = &quot;Darwin&quot; ]; then
    DL=&quot;$MACOS&quot;
    STDIO=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h
elif [ &quot;$OS&quot; = &quot;Linux&quot; ]; then
    DL=$LINUX
    STDIO=/usr/include/stdio.h
else
    echo &quot;Are you running on Windows? This might work inside the Windows Subsystem for Linux, but I haven&apos;t tried it yet..&quot;
fi

LOCAL_TGZ=tmp/jextract.tgz
REMOTE_TGZ=$DL
JEXTRACT_HOME=jextract-22

mkdir -p &quot;$(

 dirname  $LOCAL_TGZ )&quot;
wget -O $LOCAL_TGZ $REMOTE_TGZ
tar -zxf &quot;$LOCAL_TGZ&quot; -C .
export PATH=$PATH:$JEXTRACT_HOME/bin

jextract  --output src/main/java  -t com.example.stdio $STDIO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just think about it. We have easy foreign function interop, virtual threads giving us amazing scalability, and
statically linked, lightning fast, RAM efficient, self-contained GraalVM native image binaries. Tell me why you&apos;d start
a new project in Go, again? :-)&lt;/p&gt;
&lt;h2 id=&quot;a-brave-new-world&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#a-brave-new-world&quot; aria-label=&quot;a brave new world permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A Brave New World&lt;/h2&gt;
&lt;p&gt;Java 22 is an amazing new release. It brings with it a bevy of huge features and quality of life improvements. Just
remember, it can&apos;t always be this good! Nobody can introduce paradigm-changing new features consistently every six
months. It&apos;s just not possible. So, let&apos;s be thankful and enjoy it while we can, shall we? :) The last release, Java 21,
was, in my estimation, maybe the single biggest release I&apos;ve seen since perhaps Java 5, maybe even earlier. It might be
the biggest ever!&lt;/p&gt;
&lt;p&gt;There are a ton of features there that are well worth your attention, including &lt;em&gt;data-oriented programming&lt;/em&gt; and &lt;em&gt;virtual threads&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I covered this, and a lot more, in a blog I did to support the release six months ago, &lt;a href=&quot;https://spring.io/blog/2023/09/20/hello-java-21&quot;&gt;&lt;em&gt;Hello, Java 21&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;virtual-threads-structured-concurrency-and-scoped-values&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#virtual-threads-structured-concurrency-and-scoped-values&quot; aria-label=&quot;virtual threads structured concurrency and scoped values permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Virtual Threads, Structured Concurrency, and Scoped Values&lt;/h2&gt;
&lt;p&gt;Virtual threads are the really important bit, though. Read the blog I just linked you to, towards the bottom. (Don&apos;t be
like &lt;a href=&quot;https://www.youtube.com/watch?v=w87od6DjzAg&quot;&gt;the Primeagen&lt;/a&gt;, who read the article but managed to sort of move on
before even getting to the best part - the virtual threads! My friend... Why??)&lt;/p&gt;
&lt;p&gt;Virtual threads are a way to squeeze more out of your cloud infrastructure spend, your hardware, etc., if you&apos;re running
IO-bound services. They make it so that you can take existing code written against the blocking IO APIs in &lt;code&gt;java.io&lt;/code&gt;,
switch to virtual threads, and handle much better scale. The effect, usually, is that your system is no longer
constantly waiting for threads to be available so the average response time goes down, and, even nicer, you will see the
system handle many more requests at the same time! I can&apos;t stress this enough. Virtual threads are &lt;em&gt;awesome&lt;/em&gt;! And if
you&apos;re using Spring Boot 3.2, you need only specify &lt;code&gt;spring.threads.virtual.enabled=true&lt;/code&gt; to benefit from them!&lt;/p&gt;
&lt;p&gt;Virtual threads are part of a slate of new features, which have been more than half a decade in coming, designed to make
Java the lean, mean scale machine we all knew it deserved to be. And it&apos;s working! Virtual threads was one of three
features, designed to work together. Virtual threads are the only feature that has been delivered in a release form, as
yet.&lt;/p&gt;
&lt;p&gt;Structured concurrency and scoped values have both yet to land. Structured concurrency gives you a more elegant
programming model for building concurrent code, and scoped values give you an efficient and more versatile alternative
to &lt;code&gt;ThreadLocal&amp;#x3C;T&gt;&lt;/code&gt;, particularly useful in the context of virtual threads, where you can now realistically have
&lt;em&gt;millions&lt;/em&gt; of threads. Imagine having duplicated data for each of those!&lt;/p&gt;
&lt;p&gt;These features are in preview in Java 22. I don&apos;t know that they&apos;re worth showing, just yet. Virtual threads are the magic piece, in my mind, and they are so magic precisely because you don&apos;t really need to know about them! Just set that one property, and you&apos;re off.&lt;/p&gt;
&lt;p&gt;Virtual threads give you the amazing scale of something like &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in Python, Rust, C#, TypeScript, JavaScript, or &lt;code&gt;suspend&lt;/code&gt; in Kotlin, but without the inherent verbosity of code and busy work required to use those language features. It&apos;s one of the few times where, save for maybe Go&apos;s implementation, Java is just straight-up better in the result. Go&apos;s implementation is ideal, but only because they had this baked in to the 1.0 version. Indeed, Java&apos;s implementation is more remarkable precisely because it coexists with the older platform threads model.&lt;/p&gt;
&lt;h2 id=&quot;implicitly-declared-classes-and-instance-main-methods&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#implicitly-declared-classes-and-instance-main-methods&quot; aria-label=&quot;implicitly declared classes and instance main methods permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Implicitly Declared Classes and Instance Main Methods&lt;/h2&gt;
&lt;p&gt;This preview feature is huge quality-of-life win, even though the resulting code is smaller, and I warmly welcome it.
Unfortunately doesn&apos;t really work with Spring Boot, at the moment. The basic idea is that one day you&apos;ll be able to just
have a top-level main method, without all the ceremony inherent in Java today. Wouldn&apos;t this be nice as the entry point
to your application? No &lt;code&gt;class&lt;/code&gt; definition, no &lt;code&gt;public static void&lt;/code&gt;, no unneeded &lt;code&gt;String[]&lt;/code&gt; args.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;void main() {
    System.out.println(&quot;Hello, world!&quot;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;statements-before-super&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#statements-before-super&quot; aria-label=&quot;statements before super permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Statements Before Super&lt;/h2&gt;
&lt;p&gt;This is a nice quality of life feature. Basically, Java doesn&apos;t let you access &lt;code&gt;this&lt;/code&gt; before invoking the super
constructor in a subclass. The goal was to avoid a class of bugs related to invalid state. But it&apos;s a bit heavy handed,
and forced developers to resort to &lt;code&gt;private static&lt;/code&gt;  auxillary methods whenever they wanted to do any sort of
non-trivial computation before invoking the super method. Here&apos;s an example of the gymanastics sometimes required. I
stole this example from &lt;a href=&quot;https://openjdk.org/jeps/447&quot;&gt;the JEP&lt;/a&gt; page itself:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class Sub extends Super {

    Sub(Certificate certificate) {
        super(prepareByteArray(certificate));
    }

    // Auxiliary method
    private static byte[] prepareByteArray(Certificate certificate) {
        var publicKey = certificate.getPublicKey();
        if (publicKey == null)
            throw new IllegalArgumentException(&quot;null certificate&quot;);
        return switch (publicKey) {
            case RSAKey rsaKey -&gt; ///...
            case DSAPublicKey dsaKey -&gt; ...
            //...
            default -&gt; //...
        };
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the problem. This new JEP, a preview feature for now, would allow you to inline that method in the
constructor itself, promoting readability and defeating code sprawl.&lt;/p&gt;
&lt;h2 id=&quot;unnamed-variables-and-patterns&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#unnamed-variables-and-patterns&quot; aria-label=&quot;unnamed variables and patterns permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Unnamed Variables and Patterns&lt;/h2&gt;
&lt;p&gt;Unnamed variables and patterns are another quality-of-life feature. This one, however, is already delivered.&lt;/p&gt;
&lt;p&gt;When you&apos;re creating threads, or working with Java 8 streams and collectors, you&apos;re going to be creating lots of
lambdas. Indeed, there are plenty of situations in Spring where you&apos;ll be working with lambdas. Just think of all
the &lt;code&gt;*Template&lt;/code&gt; objects, and their callback-centric methods. &lt;code&gt;JdbcClient&lt;/code&gt; and &lt;code&gt;RowMapper&amp;#x3C;T&gt;&lt;/code&gt;, eh... &lt;em&gt;spring&lt;/em&gt; to mind,
too!&lt;/p&gt;
&lt;p&gt;Fun fact: Lambdas were first introduced in 2014&apos;s Java 8 release. (Yes, that was a &lt;em&gt;decade&lt;/em&gt; ago! People were doing the
ice bucket challenges, the world was obsessed with selfie sticks, &lt;em&gt;Frozen&lt;/em&gt;, and &lt;em&gt;Flappy Bird&lt;/em&gt;.), but they had the
amazing quality that the almost 20 years of Java code that came before them could participate in lambdas overnight if
methods expected a single method interface implementation.&lt;/p&gt;
&lt;p&gt;Lambdas are amazing. They introduce a new unit of reuse in the Java language. And the best part is that they were
designed in such a way as to sort of graft onto the existing rules of the runtime, including adapting so-called
&lt;em&gt;functional interfaces&lt;/em&gt; or SAMs (single abstract method) interfaces automatically to lambdas. My only complaint with
them is that it was annoying having to make things final that were referenced from within the lambda that belong to a
containing scope. That&apos;s since been fixed. And it is annoying having to spell out every parameter to a lambda even if I
have no intention of using it, and now, with Java 22, that too has been fixed! Here is a verbose example just to
demonstrate the use of the &lt;code&gt;_&lt;/code&gt; character in two places. Because I can.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.example.demo;

import org.springframework.jdbc.core.simple.JdbcClient;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;

@Component
class AnonymousLambdaParameters implements LanguageDemonstrationRunner {

	private final JdbcClient db;

	AnonymousLambdaParameters(DataSource db) {
		this.db = JdbcClient.create(db);
	}

	record Customer(Integer id, String name) {
	}

	@Override
	public void run() throws Throwable {
		var allCustomers = this.db.sql(&quot;select * from customer &quot;)
                // here! 
			.query((rs, _) -&gt; new Customer(rs.getInt(&quot;id&quot;), rs.getString(&quot;name&quot;)))
			.list();
		System.out.println(&quot;all: &quot; + allCustomers);
	}

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That class uses Spring&apos;s &lt;code&gt;JdbcClient&lt;/code&gt; to query the underlying database. It pages through the results, one by one, and
then involves our lambda, which conforms to the type &lt;code&gt;RowMapper&amp;#x3C;Customer&gt;&lt;/code&gt; to help in adapting our results into records
that line up with my domain model. The &lt;code&gt;RowMapper&amp;#x3C;T&gt;&lt;/code&gt; interface , to which our lambda conforms, has a single
method &lt;code&gt;T mapRow(ResultSet rs, int rowNum) throws SQLException&lt;/code&gt; that expects two parameters: the &lt;code&gt;ResultSet&lt;/code&gt;, which I&apos;ll
need, and the &lt;code&gt;rowNum&lt;/code&gt;, which I&apos;ll almost never need. Now, thanks to Java 22, I don&apos;t need to specify it. Just plug
in &lt;code&gt;_&lt;/code&gt;, like in Kotlin or TypeScript. Nice!&lt;/p&gt;
&lt;h2 id=&quot;gatherers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#gatherers&quot; aria-label=&quot;gatherers permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatherers&lt;/h2&gt;
&lt;p&gt;Gatherers are another nice feature that is also in preview. You may know my
friend &lt;a href=&quot;https://twitter.com/viktorklang&quot;&gt;Viktor Klang&lt;/a&gt; from his amazing work
on  &lt;a href=&quot;https://doc.akka.io/docs/akka/current/typed/actors.html&quot;&gt;Akka&lt;/a&gt;  and for his contributions to Scala futures whilst
he was at Lightbend. These days, he&apos;s a Java language architect at Oracle, and one of the things he&apos;s been working on is
the new Gatherer API. The Stream API, which was also introduced in Java 8, by the way - gave Java developers a chance,
along with lambdas, to greatly simplify and modernize their existing code, and to move in a more
functional-programming-centric direction. It models a set of transformations on a stream of values. But, there are cracks in the abstraction. The Streams API has a number of very
convenient operators that work for 99% of the scenarios, but when you find something for which a convenient operator
doesn&apos;t exist, it can be frustrating because there was no easy way to plug one in. There have been countless proposals for new operator additions to the Streams API in
the intervening ten years, and there were even discussions and concessions made in the original proposal for lambdas
that the programming model be
flexible &lt;a href=&quot;https://cr.openjdk.org/~vklang/Gatherers.html&quot;&gt;enough to support introducing new operators&lt;/a&gt;. It&apos;s finally
arrived, albeit as a preview feature. Gatherers provide a slightly more low-level abstraction that gives you the ability to plug in all sorts of new
operations on Streams, without having to materialize the &lt;code&gt;Stream&lt;/code&gt; as a &lt;code&gt;Collection&lt;/code&gt; at any point. Here&apos;s an example I
stole directly, and unabashedly, &lt;a href=&quot;https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/util/stream/Gatherer.html&quot;&gt;from Viktor and the team&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.example.demo;

import org.springframework.stereotype.Component;

import java.util.Locale;
import java.util.function.BiFunction;
import java.util.function.Supplier;
import java.util.stream.Gatherer;
import java.util.stream.Stream;

@Component
class Gatherers implements LanguageDemonstrationRunner {

    private static &amp;#x3C;T, R&gt; Gatherer&amp;#x3C;T, ?, R&gt; scan(
            Supplier&amp;#x3C;R&gt; initial,
             BiFunction&amp;#x3C;? super R, ? super T, ? extends R&gt; scanner) {

        class State {
            R current = initial.get();
        }
        return Gatherer.&amp;#x3C;T, State, R&gt;ofSequential(State::new,
                Gatherer.Integrator.ofGreedy((state, element, downstream) -&gt; {
                    state.current = scanner.apply(state.current, element);
                    return downstream.push(state.current);
                }));
    }

    @Override
    public void run() {
        var listOfNumberStrings = Stream
                .of(1, 2, 3, 4, 5, 6, 7, 8, 9)
                .gather(scan(() -&gt; &quot;&quot;, (string, number) -&gt; string + number)
                        .andThen(java.util.stream.Gatherers.mapConcurrent(10, s -&gt; s.toUpperCase(Locale.ROOT)))
                )
                .toList();
        System.out.println(listOfNumberStrings);
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main thrust of that code is that there&apos;s a method here, &lt;code&gt;scan&lt;/code&gt;, which returns an implementation of &lt;code&gt;Gatherer&amp;#x3C;T,?,R&gt;&lt;/code&gt;. Each &lt;code&gt;Gatherer&amp;#x3C;T,O,R&gt;&lt;/code&gt; expects an initializer and an integrator. It&apos;ll come with a default combiner and a default finisher, though you can override both. This implementation reads through all those number entries  and builds up a string for each entry that then accumulates after every successive string. The result is that you get &lt;code&gt;1&lt;/code&gt;, then &lt;code&gt;12&lt;/code&gt;, then &lt;code&gt;123&lt;/code&gt;, then &lt;code&gt;1234&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The example above demonstrates that gatherers are also composable. We actually have two &lt;code&gt;Gatherer&lt;/code&gt; in play: the one that does the scanning, and the one that maps every item to uppercase, and it does it concurrently.&lt;/p&gt;
&lt;p&gt;Still don&apos;t quite understand? I get the feeling that&apos;s going to be okay. This is a bit in the weeds for most folks, I&apos;d imagine. Most of us don&apos;t need to write our own Gatherers. But you &lt;em&gt;can&lt;/em&gt;. My friend &lt;a href=&quot;https://www.morling.dev/blog/zipping-gatherer/&quot;&gt;Gunnar Morling&lt;/a&gt; did just that the other day, in fact. The genius of the Gatherers approach is that now the community can scratch its own itch. I wonder what this implies for awesome projects like Eclipse Collections or Apache Commons Collections or Guava? Will they ship Gatherers? What other projects might?   I&apos;d love to see a lot of common sense gatherers, eh, well, &lt;em&gt;gathered&lt;/em&gt; into one place.&lt;/p&gt;
&lt;h2 id=&quot;class-parsing-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#class-parsing-api&quot; aria-label=&quot;class parsing api permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class Parsing API&lt;/h2&gt;
&lt;p&gt;Yet another really nice preview feature, this new addition to the JDK is really tuned to framework and infrastructure
folks. It answers questions like how do I build up a &lt;code&gt;.class&lt;/code&gt; file, and how do I read a &lt;code&gt;.class&lt;/code&gt; file? Right now the
market is saturated with good, albeit incompatible and alway, by definition, ever so slightly out of date options like
ASM (the 800 lb. gorilla in the space), ByteBuddy, CGLIB, etc. The JDK itself has three such solutions in its own
codebase! These sorts of libraries are everywhere, and critical for developers who are building frameworks like Spring
that generate classes at runtime to support your business logical. Think of this as a sort of reflection API, but
for &lt;code&gt;.class&lt;/code&gt; files - the literal bytecode on the disk. Not an object loaded into the JVM.&lt;/p&gt;
&lt;p&gt;Here&apos;s a trivial example that loads a &lt;code&gt;.class&lt;/code&gt; file into a &lt;code&gt;byte[]&lt;/code&gt; array and then introspects it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
package com.example.demo;

import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.context.annotation.ImportRuntimeHints;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;

import java.lang.classfile.ClassFile;
import java.lang.classfile.FieldModel;
import java.lang.classfile.MethodModel;

@Component
@ImportRuntimeHints(ClassParsing.Hints.class)
class ClassParsing implements LanguageDemonstrationRunner {

    static class Hints implements RuntimeHintsRegistrar {

        @Override
        public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
            hints.resources().registerResource(DEFAULT_CUSTOMER_SERVICE_CLASS);
        }

    }

    private final byte[] classFileBytes;

    private static final Resource DEFAULT_CUSTOMER_SERVICE_CLASS = new ClassPathResource(
            &quot;/simpleclassfile/DefaultCustomerService.class&quot;);

    ClassParsing() throws Exception {
        this.classFileBytes = DEFAULT_CUSTOMER_SERVICE_CLASS.getContentAsByteArray();
    }

    @Override
    public void run() {
        // this is the important logic
        var classModel = ClassFile.of().parse(this.classFileBytes);
        for (var classElement : classModel) {
            switch (classElement) {
                case MethodModel mm -&gt; System.out.printf(&quot;Method %s%n&quot;, mm.methodName().stringValue());
                case FieldModel fm -&gt; System.out.printf(&quot;Field %s%n&quot;, fm.fieldName().stringValue());
                default -&gt; {
                    // ... 
                }
            }
        }
    }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example is made a bit more complicated because I am reading a resource at runtime, so I implemented a Spring
AOT &lt;code&gt;RuntimeHintsRegistrar&lt;/code&gt; that results in a &lt;code&gt;.json&lt;/code&gt; file with information about which resource I am reading,
the &lt;code&gt;DefaultCustomerService.class&lt;/code&gt; file itself. Ignore all that. It&apos;s just for the GraalVM native image compilation.&lt;/p&gt;
&lt;p&gt;The interesting bit is at the bottom, where we enumerate the &lt;code&gt;ClassElement&lt;/code&gt; instances and then use some pattern matching
to tease out individual elements. Nice!&lt;/p&gt;
&lt;h2 id=&quot;string-templates&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#string-templates&quot; aria-label=&quot;string templates permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String Templates&lt;/h2&gt;
&lt;p&gt;Yet another preview feature, String templates bring String interpolation to Java! We&apos;ve had multiline Java &lt;code&gt;String&lt;/code&gt;
values for a while. This new feature lets the language interpose variables available in scope in the compiled &lt;code&gt;String&lt;/code&gt;
value. The best part? In theory, the mechanism itself is pluggable! Don&apos;t like this syntax? Write your own.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.example.demo;

import org.springframework.stereotype.Component;

@Component
class StringTemplates implements LanguageDemonstrationRunner {

    @Override
    public void run() throws Throwable {
        var name = &quot;josh&quot;;
        System.out.println(STR.&quot;&quot;&quot; 
            name: \{name.toUpperCase()}
            &quot;&quot;&quot;);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There&apos;s never been a better time to be a Java and Spring developer! I say it all the time. I feel like we&apos;re being given a brand new language and runtime, and it&apos;s being done - miraculously - in such a way as to not break backwards compatibility. This is one of the most ambitious software projects I&apos;ve ever seen the Java community embark on, and we are lucky to be here to reap the rewards. I&apos;ll be using Java 22 and GraalVM support Java 22 for everything from now on, and I hope you will too. Thanks for reading along, and I hope if you liked it that you&apos;ll feel free to check out our Youtube channel and my &lt;em&gt;Spring Tips&lt;/em&gt; playlist where I will for sure &lt;a href=&quot;https://bit.ly/spring-tips-playlist&quot;&gt;be covering Java 22 and  much more&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks, also, to my friend and &lt;a href=&quot;http://twitter.com/alina_yurenko/status/1587102593851052032?s=61&amp;#x26;t=ahaeq7OhMUteRPzmYqDtKA&quot;&gt;GraalVM developer advocate extraordinaiire Alina Yurenko (@http://twitter.com/alina_yurenko/status/1587102593851052032?s=61&amp;#x26;t=ahaeq7OhMUteRPzmYqDtKA) for helping me get some of these details right&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Authorization Server 1.3.0-M3 available now]]></title><link>https://spring.io/blog/2024/03/19/spring-authorization-server-1-3-0-m3-available-now</link><guid isPermaLink="true">https://spring.io/blog/2024/03/19/spring-authorization-server-1-3-0-m3-available-now</guid><dc:creator><![CDATA[Steve Riesenberg]]></dc:creator><pubDate>Tue, 19 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, it is my pleasure to announce the release of Spring Authorization Server 1.3.0-M3! The milestone release of Spring Authorization Server contains a few noteworthy new features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add PKI Mutual-TLS client authentication method (&lt;code&gt;tls_client_auth&lt;/code&gt;) &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/issues/1558&quot;&gt;#1558&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement OAuth 2.0 Token Exchange &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/pull/1525&quot;&gt;#1525&lt;/a&gt; (see related &lt;a href=&quot;https://spring.io/blog/2024/03/19/token-exchange-support-in-spring-security-6-3-0-m3&quot;&gt;blog post&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/releases/tag/1.3.0-M3&quot;&gt;1.3.0-M3&lt;/a&gt; release notes for complete details.&lt;/p&gt;
&lt;p&gt;To get started using Spring Authorization Server, see the &lt;a href=&quot;https://docs.spring.io/spring-authorization-server/reference/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; chapter of the reference documentation and the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/tree/main/samples&quot;&gt;samples&lt;/a&gt; to become familiar with setup and configuration.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-authorization-server&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/orgs/spring-projects/projects/8/views/21&quot;&gt;Project Board&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Token Exchange support in Spring Security 6.3.0-M3]]></title><link>https://spring.io/blog/2024/03/19/token-exchange-support-in-spring-security-6-3-0-m3</link><guid isPermaLink="true">https://spring.io/blog/2024/03/19/token-exchange-support-in-spring-security-6-3-0-m3</guid><dc:creator><![CDATA[Steve Riesenberg]]></dc:creator><pubDate>Tue, 19 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m excited to share that the there will be support for the OAuth 2.0 Token Exchange Grant (&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot; title=&quot;OAuth 2.0 Token Exchange&quot;&gt;RFC 8693&lt;/a&gt;) in Spring Security 6.3, which is available for preview now in the latest milestone (&lt;a href=&quot;https://github.com/spring-projects/spring-security/releases/tag/6.3.0-M3&quot;&gt;6.3.0-M3&lt;/a&gt;). This support provides the ability to use Token Exchange with &lt;a href=&quot;https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html&quot;&gt;OAuth2 Client&lt;/a&gt;. Similarly, server-side support is also shipping with &lt;a href=&quot;https://docs.spring.io/spring-authorization-server/reference/index.html&quot;&gt;Spring Authorization Server&lt;/a&gt; in 1.3 and is available for preview now in the latest milestone (&lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/releases/tag/1.3.0-M3&quot;&gt;1.3.0-M3&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;OAuth2 Client features of Spring Security allow us to easily make protected resources requests to an API secured with OAuth2 bearer tokens. Similarly, OAuth2 Resource Server features of Spring Security allow us to secure an API with OAuth2. Let&apos;s take a look at how we can use the new support to build OAuth2 flows with Token Exchange.&lt;/p&gt;
&lt;h2 id=&quot;an-example&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#an-example&quot; aria-label=&quot;an example permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;An example&lt;/h2&gt;
&lt;p&gt;Let&apos;s imagine we have a resource server called &lt;code&gt;user-service&lt;/code&gt; providing an API to access user information. In order to make requests to &lt;code&gt;user-service&lt;/code&gt;, clients must provide an access token. Let&apos;s assume tokens must have an audience (&lt;code&gt;aud&lt;/code&gt; claim) of &lt;code&gt;user-service&lt;/code&gt;. This might look like the following as Spring Boot configuration properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://my-auth-server.com
          audiences: user-service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&apos;s imagine we want to introduce a new resource server called &lt;code&gt;message-service&lt;/code&gt; and call it from &lt;code&gt;user-service&lt;/code&gt;. Let&apos;s assume then that tokens for this new service must have an audience of &lt;code&gt;message-service&lt;/code&gt;. Clearly we can&apos;t re-use the token from a request to &lt;code&gt;user-service&lt;/code&gt; in a request to &lt;code&gt;message-service&lt;/code&gt;. However, we&apos;d like the identity of the user from the original request to be preserved. How would we accomplish this?&lt;/p&gt;
&lt;p&gt;In order to obtain the necessary access token for &lt;code&gt;message-service&lt;/code&gt;, the resource server &lt;code&gt;user-service&lt;/code&gt; must become a client and exchange an existing token for a new one that retains the identity (user) of the original token. This is called &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693#name-delegation-vs-impersonation&quot;&gt;&quot;impersonation&quot;&lt;/a&gt; and is exactly the kind of scenario OAuth 2.0 Token Exchange is designed for.&lt;/p&gt;
&lt;h2 id=&quot;configuring-the-resource-server-as-a-client&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#configuring-the-resource-server-as-a-client&quot; aria-label=&quot;configuring the resource server as a client permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Configuring the resource server as a client&lt;/h2&gt;
&lt;p&gt;To enable Token Exchange, we need to configure &lt;code&gt;user-service&lt;/code&gt; to act as both a resource server &lt;em&gt;and&lt;/em&gt; a client that can use Token Exchange, as the following Spring Boot configuration properties show:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://my-auth-server.com
          audiences: user-service
      client:
        registration:
          my-token-exchange-client:
            provider: my-auth-server
            client-id: token-client
            client-secret: token
            authorization-grant-type: urn:ietf:params:oauth:grant-type:token-exchange
            client-authentication-method: client_secret_basic
            scope:
                - message.read
        provider:
          my-auth-server:
            issuer-uri: https://my-auth-server.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to enable the use of the new grant type in Spring Security, which we can do by publishing the following bean:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;    @Bean
    public OAuth2AuthorizedClientProvider tokenExchange() {
        return new TokenExchangeOAuth2AuthorizedClientProvider();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is all that is required to begin using Token Exchange. However, if we want to request a specific &lt;code&gt;audience&lt;/code&gt; or &lt;code&gt;resource&lt;/code&gt; value, we need to configure additional parameters as part of the token request, as the following example shows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;    @Bean
    public OAuth2AuthorizedClientProvider tokenExchange() {
        var requestEntityConverter = new TokenExchangeGrantRequestEntityConverter();
        requestEntityConverter.addParametersConverter((grantRequest) -&gt; {
            var parameters = new LinkedMultiValueMap&amp;#x3C;String, String&gt;();
            parameters.add(OAuth2ParameterNames.AUDIENCE, &quot;message-service&quot;);
            parameters.add(OAuth2ParameterNames.RESOURCE, &quot;https://example.com/messages&quot;);

            return parameters;
        });

        var accessTokenResponseClient = new DefaultTokenExchangeTokenResponseClient();
        accessTokenResponseClient.setRequestEntityConverter(requestEntityConverter);

        var authorizedClientProvider = new TokenExchangeOAuth2AuthorizedClientProvider();
        authorizedClientProvider.setAccessTokenResponseClient(accessTokenResponseClient);

        return authorizedClientProvider;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this configuration in place, we can obtain an access token in one resource server and use it as a &lt;code&gt;Bearer&lt;/code&gt; token in a protected resources request to another resource server. The original bearer token passed to the resource server in the &lt;code&gt;Authorization&lt;/code&gt; header will be used by default to obtain the new access token.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: See &lt;a href=&quot;https://docs.spring.io/spring-security/reference/servlet/oauth2/client/authorized-clients.html&quot;&gt;Authorized Client Features&lt;/a&gt; in the reference documentation for more information on how to obtain an access token and make a protected resources request with this configuration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;enabling-token-exchange-on-the-server&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#enabling-token-exchange-on-the-server&quot; aria-label=&quot;enabling token exchange on the server permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enabling Token Exchange on the server&lt;/h2&gt;
&lt;p&gt;To complete the picture, let&apos;s build a brand new authorization server application with Spring Authorization Server to support this flow.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt; with the &lt;a href=&quot;https://start.spring.io/#!type=gradle-project&amp;#x26;language=java&amp;#x26;packaging=jar&amp;#x26;groupId=com.example&amp;#x26;artifactId=auth-server&amp;#x26;name=auth-server&amp;#x26;description=Demo%20Spring%20Authorization%20Server%20project&amp;#x26;packageName=com.example&amp;#x26;dependencies=oauth2-authorization-server&quot;&gt;OAuth2 Authorization Server&lt;/a&gt; dependency, we can configure a fully functional authorization server using the following Spring Boot configuration properties:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;spring:
  security:
    user:
      name: sally
      password: password
    oauth2:
      authorizationserver:
        client:
          test-client:
            registration:
              client-id: test-client
              client-secret: {noop}secret
              client-authentication-methods:
                - client_secret_basic
              authorization-grant-types:
                - authorization_code
                - refresh_token
              scopes:
                - user.read
          token-client:
            registration:
              client-id: token-client
              client-secret: {noop}token
              client-authentication-methods:
                - client_secret_basic
              authorization-grant-types:
                - urn:ietf:params:oauth:grant-type:token-exchange
              scopes:
                - message.read
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with the client, we may want to support specific request parameters for Token Exchange such as &lt;code&gt;audience&lt;/code&gt; or &lt;code&gt;resource&lt;/code&gt;. The &lt;code&gt;audience&lt;/code&gt; parameter is supported out of the box. To support other parameters such as the &lt;code&gt;resource&lt;/code&gt; parameter, we can publish the following bean:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;	@Bean
	public OAuth2TokenCustomizer&amp;#x3C;JwtEncodingContext&gt; accessTokenCustomizer() {
		return (context) -&gt; {
			if (context.getPrincipal() instanceof OAuth2TokenExchangeAuthenticationToken tokenExchangeRequest) {
				var resources = tokenExchangeRequest.getResources();
				// TODO: Validate resource value(s) and map to the
				// appropriate audience value(s) if needed...

				context.getClaims().audience(...);
			}
		};
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this configuration in place, the authorization server supports the Token Exchange grant with the optional &lt;code&gt;resource&lt;/code&gt; parameter of the OAuth 2.0 Token Request, and is able to issue tokens allowing a resource server to act as a client and impersonate an end user.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this blog post, we have discussed the &quot;impersonation&quot; use case for Token Exchange and explored a simple configuration for both a resource server (acting as a client) and an authorization server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: See &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693#section-appendix.a&quot;&gt;Appendix A&lt;/a&gt; of &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8693&quot;&gt;RFC 8693&lt;/a&gt; for additional examples including an example of an additional use case called &quot;delegation&quot; which is also supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you are as excited as I am about this new support! I encourage you to try out the &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/tree/main/samples&quot;&gt;samples&lt;/a&gt; in Spring Authorization Server which includes a working example of this blog post. Please also try the milestones of both Spring Security and Spring Authorization Server in your own project. We would love your feedback!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Authorization Server 1.2.3, 1.1.6 and 1.0.6 Available Now Including Fixes for CVE-2024-22258]]></title><link>https://spring.io/blog/2024/03/19/spring-authorization-server-1-2-3-1-1-6-and-1-0-6-available-now-including</link><guid isPermaLink="true">https://spring.io/blog/2024/03/19/spring-authorization-server-1-2-3-1-1-6-and-1-0-6-available-now-including</guid><dc:creator><![CDATA[Joe Grandja]]></dc:creator><pubDate>Tue, 19 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, it is my pleasure to announce the general availability of Spring Authorization Server 1.2.3, 1.1.6 and 1.0.6.&lt;/p&gt;
&lt;p&gt;The releases address &lt;a href=&quot;https://spring.io/security/cve-2024-22258&quot;&gt;CVE-2024-22258&lt;/a&gt; for PKCE Downgrade in Spring Authorization Server.&lt;/p&gt;
&lt;h2 id=&quot;tanzu-spring-runtime&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tanzu-spring-runtime&quot; aria-label=&quot;tanzu spring runtime permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tanzu Spring Runtime&lt;/h2&gt;
&lt;p&gt;Commercial customers using Spring Boot 2.7 or 3.0 can make use of the new Spring Boot Hotfix release mechanism, providing versions 2.7.20.2 and 3.0.15.2. Spring Boot Hotfix releases are timely releases that patch dependency management to use the latest Spring artifacts when a CVE fix is released. The hotfix versions released today are available on the Spring commercial artifact repository and can be accessed with a Spring Enterprise Subscription.&lt;/p&gt;
&lt;p&gt;Commercial customers and OSS users of Spring Boot 3.1 and 3.2 should manually upgrade to Spring Authorization Server 1.1.6 and 1.2.3 now, and to Spring Boot 3.1.10 and 3.2.4 later this week when those become available.&lt;/p&gt;
&lt;p&gt;Stay tuned for more details on hotfix releases and our plans in that space.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-authorization-server&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-authorization-server/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/orgs/spring-projects/projects/8/views/21&quot;&gt;Project Board&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring for Apache Kafka 3.0.15, 3.1.3 and 3.2.0-M2 Available Now]]></title><link>https://spring.io/blog/2024/03/19/spring-for-apache-kafka-3-0-15-3-1-3-and-3-2-0-m2-available-now</link><guid isPermaLink="true">https://spring.io/blog/2024/03/19/spring-for-apache-kafka-3-0-15-3-1-3-and-3-2-0-m2-available-now</guid><dc:creator><![CDATA[Soby Chacko]]></dc:creator><pubDate>Tue, 19 Mar 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the entire team and everyone in the community who contributed, we are pleased to announce the general availability of Spring for Apache Kafka &lt;code&gt;3.0.15&lt;/code&gt; and &lt;code&gt;3.1.3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Spring for Apache Kafka &lt;code&gt;3.0.15&lt;/code&gt; includes a &lt;a href=&quot;https://github.com/spring-projects/spring-kafka/releases/tag/v3.0.15&quot;&gt;few improvements and bug fixes&lt;/a&gt;. In addition, this version now supports the ability to call the &lt;code&gt;enforceRebalance&lt;/code&gt; on the Kafka consumer.  This release will be included as part of the upcoming &lt;a href=&quot;https://github.com/spring-projects/spring-boot/milestone/337&quot;&gt;Spring Boot 3.1.10 release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring for Apache Kafka &lt;code&gt;3.1.3&lt;/code&gt; ships with &lt;a href=&quot;https://github.com/spring-projects/spring-kafka/releases/tag/v3.1.3&quot;&gt;some new features, enhancements, bug fixes and documentation improvements&lt;/a&gt;. This release will be part of the upcoming &lt;a href=&quot;https://github.com/spring-projects/spring-boot/milestone/338&quot;&gt;Spring Boot 3.2.4 release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also released the second milestone for Spring for Apache Kafka 3.2.0 (&lt;code&gt;3.2.0-M2&lt;/code&gt;). This milestone release includes a number of new additions as &lt;a href=&quot;https://github.com/spring-projects/spring-kafka/releases/tag/v3.2.0-M2&quot;&gt;features, enhancements, bug fixes and documentation changes&lt;/a&gt;. Some notable improvements are the support for non-blocking retries when using &lt;code&gt;KafkaListener&lt;/code&gt; as a class-level annotation, a new seek API based on offsets computed from a user-provided function, more enhancements in the Kafka Stream interactive query support, etc. This milestone release will be included in the upcoming &lt;a href=&quot;https://github.com/spring-projects/spring-boot/milestone/330&quot;&gt;Spring Boot 3.3.0-M3 release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We want to thank everyone who contributed to these releases.&lt;/p&gt;
&lt;h4 id=&quot;staying-in-touch-with-the-project&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#staying-in-touch-with-the-project&quot; aria-label=&quot;staying in touch with the project permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Staying in touch with the project&lt;/h4&gt;
&lt;p&gt;Following are the usual avenues where you can engage with the project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-kafka&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-kafka/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-kafka/reference&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/tags/spring-kafka&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>